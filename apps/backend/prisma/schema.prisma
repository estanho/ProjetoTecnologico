generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../documentation/diagrams/ERD.md"
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "../documentation/diagrams/"
  outputName = "CLASS.dbml"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Address {
  id        String @id @default(uuid())
  latitude  String
  longitude String

  student Student[]
  school  School[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("addresses")
}

model School {
  id                  String   @id @default(uuid())
  name                String
  morning_arrival     DateTime
  morning_departure   DateTime
  afternoon_arrival   DateTime
  afternoon_departure DateTime
  night_arrival       DateTime
  night_departure     DateTime

  adress_id String
  adress    Address @relation(fields: [adress_id], references: [id])

  itinerary_id String
  itinerary    Itinerary @relation(fields: [itinerary_id], references: [id])

  student Student[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("schools")
}

model User {
  id        String @id @default(uuid())
  code      String
  name      String
  email     String
  cellphone String
  type      String

  role_id String
  role    Role   @relation(fields: [role_id], references: [id])

  driver_id String
  driver    Driver @relation(fields: [driver_id], references: [id])

  responsible_id String
  responsible    Responsible @relation(fields: [responsible_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Role {
  id   String @id @default(uuid())
  name String

  user User[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("roles")
}

model Responsible {
  id String @id @default(uuid())

  user User[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("responsibles")
}

model Student {
  id        String  @id @default(uuid())
  goes      Boolean
  return    Boolean
  morning   Boolean
  afternoon Boolean
  night     Boolean

  school_id String
  school    School @relation(fields: [school_id], references: [id])

  adress_id String
  adress    Address @relation(fields: [adress_id], references: [id])

  student_trip Student_Trip[]

  student_itinerary Student_Itinerary[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("students")
}

model Driver {
  id String @id @default(uuid())

  user User[]

  itinerary_id String
  itinerary    Itinerary @relation(fields: [itinerary_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("drivers")
}

model Itinerary {
  id        String  @id @default(uuid())
  monday    Boolean
  tuesday   Boolean
  wednesday Boolean
  thursday  Boolean
  friday    Boolean
  saturday  Boolean
  morning   Boolean
  afternoon Boolean
  night     Boolean

  driver Driver[]

  school School[]

  trip Trip[]

  student_Itinerary Student_Itinerary[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("itineraries")
}

model Student_Itinerary {
  student_id String
  student    Student @relation(fields: [student_id], references: [id])

  itinerary_id String
  itinerary    Itinerary @relation(fields: [itinerary_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([student_id, itinerary_id])
  @@map("student_itineraries")
}

model Trip {
  id          String   @id @default(uuid())
  path        Json
  started_at  DateTime
  finished_at DateTime

  itinerary_id String
  Itinerary    Itinerary? @relation(fields: [itinerary_id], references: [id])

  student_trip Student_Trip[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("trips")
}

model Student_Trip {
  id             String   @id @default(uuid())
  embarked_at    DateTime
  disembarked_at DateTime

  student_id String
  student    Student @relation(fields: [student_id], references: [id])

  trip_id String
  trip    Trip   @relation(fields: [trip_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("student_trips")
}
