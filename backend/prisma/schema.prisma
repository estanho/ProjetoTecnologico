generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../documentation/diagrams/ERD.md"
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "../documentation/diagrams/"
  outputName = "CLASS.dbml"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

enum Role {
  StudentRole
  ResponsibleRole
  DriverRole

  @@schema("public")
}

enum Shift {
  morning
  morning_afternoon
  afternoon
  afternoon_night
  night

  @@schema("public")
}

enum TypeTrip {
  going_morning
  return_morning
  going_afternoon_return_morning
  going_afternoon
  return_afternoon
  going_night_return_afternoon
  going_night
  return_night

  @@schema("public")
}

enum TypeTripStudent {
  going
  return

  @@schema("public")
}

model Address {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  place_id   String
  name       String
  latitude   Float
  longitude  Float
  created_at DateTime @default(now())

  student_id String?  @unique @db.Uuid
  student    Student? @relation(fields: [student_id], references: [id], onDelete: Cascade)

  school_address_id String? @unique @db.Uuid
  school_address    School? @relation("address", fields: [school_address_id], references: [id], onDelete: Cascade)

  school_default_id String? @unique @db.Uuid
  school_default    School? @relation("default", fields: [school_default_id], references: [id], onDelete: Cascade)

  @@map("addresses")
  @@schema("public")
}

model School {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  status              Boolean?  @default(true)
  morning             Boolean?
  morning_arrival     DateTime?
  morning_departure   DateTime?
  afternoon           Boolean?
  afternoon_arrival   DateTime?
  afternoon_departure DateTime?
  night               Boolean?
  night_arrival       DateTime?
  night_departure     DateTime?
  created_at          DateTime  @default(now())

  address          Address? @relation("address")
  default_location Address? @relation("default")

  driver_id String? @db.Uuid
  driver    Driver? @relation(fields: [driver_id], references: [id], onDelete: Cascade)

  itineraries_morning   Itinerary[] @relation("school_morning")
  itineraries_afternoon Itinerary[] @relation("school_afternoon")
  itineraries_night     Itinerary[] @relation("school_night")

  student Student[]

  @@map("schools")
  @@schema("public")
}

model Public_User {
  id          String   @id @db.Uuid
  email       String   @unique
  name        String?
  cellphone   String?
  role        Role?
  first_login Boolean  @default(true)
  created_at  DateTime @default(now())

  driver      Driver?
  student     Student?
  responsible Responsible?

  notification              Notification[]
  notification_subscription Notification_Subscription[]

  users auth_users @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("users")
  @@schema("public")
}

model Responsible {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String   @unique
  registered Boolean? @default(false)
  created_at DateTime @default(now())

  user_id String?      @unique @db.Uuid
  user    Public_User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  students Student[]

  student_absences_going  Student[] @relation("authorized_absence_going")
  student_absences_return Student[] @relation("authorized_absence_return")

  @@map("responsibles")
  @@schema("public")
}

model Student {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code       String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String?
  email      String?  @unique
  registered Boolean? @default(false)
  afternoon  Boolean?
  morning    Boolean?
  night      Boolean?
  goes       Boolean? @default(true)
  return     Boolean? @default(true)
  created_at DateTime @default(now())

  address Address?

  school_id String? @db.Uuid
  school    School? @relation(fields: [school_id], references: [id], onDelete: SetNull)

  driver_id String? @db.Uuid
  driver    Driver? @relation(fields: [driver_id], references: [id], onDelete: Cascade)

  user_id String?      @unique @db.Uuid
  user    Public_User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  responsibles Responsible[]
  student_trip Student_Trip[]
  notification Notification[]

  responsible_absence_going_id String?      @db.Uuid
  responsible_absence_going    Responsible? @relation("authorized_absence_going", fields: [responsible_absence_going_id], references: [id])

  responsible_absence_return_id String?      @db.Uuid
  responsible_absence_return    Responsible? @relation("authorized_absence_return", fields: [responsible_absence_return_id], references: [id])

  @@map("students")
  @@schema("public")
}

model Driver {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cnh        String
  created_at DateTime @default(now())

  itinerary Itinerary[]
  school    School[]
  student   Student[]

  user_id String      @unique @db.Uuid
  user    Public_User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("drivers")
  @@schema("public")
}

model Itinerary {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  day        DateTime
  started    Boolean? @default(false)
  created_at DateTime @default(now())

  driver_id String @db.Uuid
  driver    Driver @relation(fields: [driver_id], references: [id], onDelete: Cascade)

  school_morning_id String? @db.Uuid
  school_morning    School? @relation("school_morning", fields: [school_morning_id], references: [id], onDelete: SetNull)

  school_afternoon_id String? @db.Uuid
  school_afternoon    School? @relation("school_afternoon", fields: [school_afternoon_id], references: [id], onDelete: SetNull)

  school_night_id String? @db.Uuid
  school_night    School? @relation("school_night", fields: [school_night_id], references: [id], onDelete: SetNull)

  trips Trip[]

  @@map("itineraries")
  @@schema("public")
}

model Trip {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shift       Shift
  type        TypeTrip
  path        String?
  duration    Float?
  km          Float?
  estimated   DateTime?
  started_at  DateTime?
  finished_at DateTime?
  rollCall    Boolean?

  latitude  Float?
  longitude Float?

  created_at DateTime @default(now())

  itinerary_id String     @db.Uuid
  itinerary    Itinerary? @relation(fields: [itinerary_id], references: [id], onDelete: Cascade)

  student_trips Student_Trip[]

  @@map("trips")
  @@schema("public")
}

model Student_Trip {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order            Int?
  responsible_name String?
  absent           Boolean?
  type             TypeTripStudent?
  time             DateTime?
  created_at       DateTime         @default(now())

  rollCallPresent Boolean? @default(false)

  student_id String?  @db.Uuid
  student    Student? @relation(fields: [student_id], references: [id], onDelete: Cascade)

  trip_id String? @db.Uuid
  trip    Trip?   @relation(fields: [trip_id], references: [id], onDelete: Cascade)

  @@map("students_trips")
  @@schema("public")
}

model Notification_Subscription {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subscription Json?

  created_at DateTime @default(now())

  user_id String?      @db.Uuid
  user    Public_User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications_subscriptions")
  @@schema("public")
}

model Notification {
  id   String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String?
  type String?

  created_at DateTime @default(now())

  user_id String?      @db.Uuid
  user    Public_User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  student_id String?  @db.Uuid
  student    Student? @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@schema("public")
}

model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

model identities {
  id              String
  user_id         String     @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime?  @db.Timestamptz(6)
  created_at      DateTime?  @db.Timestamptz(6)
  updated_at      DateTime?  @db.Timestamptz(6)
  email           String?    @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  users           auth_users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([provider, id])
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

model mfa_challenges {
  id          String      @id @db.Uuid
  factor_id   String      @db.Uuid
  created_at  DateTime    @db.Timestamptz(6)
  verified_at DateTime?   @db.Timestamptz(6)
  ip_address  String      @db.Inet
  mfa_factors mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

model mfa_factors {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  friendly_name  String?
  factor_type    factor_type
  status         factor_status
  created_at     DateTime         @db.Timestamptz(6)
  updated_at     DateTime         @db.Timestamptz(6)
  secret         String?
  mfa_challenges mfa_challenges[]
  users          auth_users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  from_ip_address String?       @db.Inet
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          auth_users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

model auth_users {
  instance_id                 String?       @db.Uuid
  id                          String        @id @db.Uuid
  aud                         String?       @db.VarChar(255)
  role                        String?       @db.VarChar(255)
  email                       String?       @db.VarChar(255)
  encrypted_password          String?       @db.VarChar(255)
  email_confirmed_at          DateTime?     @db.Timestamptz(6)
  invited_at                  DateTime?     @db.Timestamptz(6)
  confirmation_token          String?       @db.VarChar(255)
  confirmation_sent_at        DateTime?     @db.Timestamptz(6)
  recovery_token              String?       @db.VarChar(255)
  recovery_sent_at            DateTime?     @db.Timestamptz(6)
  email_change_token_new      String?       @db.VarChar(255)
  email_change                String?       @db.VarChar(255)
  email_change_sent_at        DateTime?     @db.Timestamptz(6)
  last_sign_in_at             DateTime?     @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?     @db.Timestamptz(6)
  updated_at                  DateTime?     @db.Timestamptz(6)
  phone                       String?       @unique
  phone_confirmed_at          DateTime?     @db.Timestamptz(6)
  phone_change                String?       @default("")
  phone_change_token          String?       @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?     @db.Timestamptz(6)
  confirmed_at                DateTime?     @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?       @default("") @db.VarChar(255)
  email_change_confirm_status Int?          @default(0) @db.SmallInt
  banned_until                DateTime?     @db.Timestamptz(6)
  reauthentication_token      String?       @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?     @db.Timestamptz(6)
  is_sso_user                 Boolean       @default(false)
  deleted_at                  DateTime?     @db.Timestamptz(6)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  sessions                    sessions[]
  users                       Public_User?

  @@index([instance_id])
  @@map("users")
  @@schema("auth")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn

  @@schema("auth")
}
