generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../documentation/diagrams/ERD.md"
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "../documentation/diagrams/"
  outputName = "CLASS.dbml"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Address {
  id         String    @id @default(uuid())
  latitude   String
  longitude  String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  school     School[]
  student    Student[]

  @@map("addresses")
}

model School {
  id                  String    @id @default(uuid())
  name                String
  morning_arrival     DateTime
  morning_departure   DateTime
  afternoon_arrival   DateTime
  afternoon_departure DateTime
  night_arrival       DateTime
  night_departure     DateTime
  adress_id           String
  itinerary_id        String
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  adress              Address   @relation(fields: [adress_id], references: [id])
  itinerary           Itinerary @relation(fields: [itinerary_id], references: [id])
  student             Student[]

  @@map("schools")
}

model User {
  id             String      @id @default(uuid())
  email          String      @unique
  name           String
  cellphone      String
  code           String
  created_at     DateTime    @default(now())
  driver_id      String
  responsible_id String
  role_id        String
  type           String
  updated_at     DateTime    @updatedAt
  driver         Driver      @relation(fields: [driver_id], references: [id])
  responsible    Responsible @relation(fields: [responsible_id], references: [id])
  role           Role        @relation(fields: [role_id], references: [id])

  @@map("users")
}

model Role {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User[]

  @@map("roles")
}

model Responsible {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User[]

  @@map("responsibles")
}

model Student {
  id                String              @id @default(uuid())
  school_id         String
  adress_id         String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  afternoon         Boolean
  goes              Boolean
  morning           Boolean
  night             Boolean
  return            Boolean
  student_itinerary Student_Itinerary[]
  student_trip      Student_Trip[]
  adress            Address             @relation(fields: [adress_id], references: [id])
  school            School              @relation(fields: [school_id], references: [id])

  @@map("students")
}

model Driver {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  itinerary_id String
  itinerary    Itinerary @relation(fields: [itinerary_id], references: [id])
  user         User[]

  @@map("drivers")
}

model Itinerary {
  id                String              @id @default(uuid())
  monday            Boolean
  tuesday           Boolean
  wednesday         Boolean
  thursday          Boolean
  friday            Boolean
  saturday          Boolean
  morning           Boolean
  afternoon         Boolean
  night             Boolean
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  driver            Driver[]
  school            School[]
  student_Itinerary Student_Itinerary[]
  trip              Trip[]

  @@map("itineraries")
}

model Student_Itinerary {
  student_id   String
  itinerary_id String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  itinerary    Itinerary @relation(fields: [itinerary_id], references: [id])
  student      Student   @relation(fields: [student_id], references: [id])

  @@id([student_id, itinerary_id])
  @@map("student_itineraries")
}

model Trip {
  id           String         @id @default(uuid())
  path         Json
  started_at   DateTime
  finished_at  DateTime
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  itinerary_id String
  student_trip Student_Trip[]
  Itinerary    Itinerary      @relation(fields: [itinerary_id], references: [id])

  @@map("trips")
}

model Student_Trip {
  id             String   @id @default(uuid())
  embarked_at    DateTime
  disembarked_at DateTime
  student_id     String
  trip_id        String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  student        Student  @relation(fields: [student_id], references: [id])
  trip           Trip     @relation(fields: [trip_id], references: [id])

  @@map("student_trips")
}

model Route {
  id         String @id @default(uuid())
  name       String
  distance   Float
  duration   Float
  directions Json

  source_id String
  source    Place  @relation("source", fields: [source_id], references: [id])

  destination_id String
  destination    Place  @relation("destination", fields: [destination_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("routes")
}

model Place {
  id        String @id @default(uuid())
  place_id  String
  name      String
  latitude  Float
  longitude Float

  source      Route[] @relation("source")
  destination Route[] @relation("destination")

  @@map("places")
}
